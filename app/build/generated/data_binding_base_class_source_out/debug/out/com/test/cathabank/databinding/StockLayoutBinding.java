// Generated by data binding compiler. Do not edit!
package com.test.cathabank.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.test.cathabank.R;
import com.test.cathabank.data.model.StockInfo;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class StockLayoutBinding extends ViewDataBinding {
  @NonNull
  public final TextView tvClosePrice;

  @NonNull
  public final TextView tvHighPrice;

  @NonNull
  public final TextView tvLowPrice;

  @NonNull
  public final TextView tvMonthlyAverage;

  @NonNull
  public final TextView tvOpenPrice;

  @NonNull
  public final TextView tvPriceDifference;

  @NonNull
  public final TextView tvStockCode;

  @NonNull
  public final TextView tvStockName;

  @NonNull
  public final TextView tvTradeValue;

  @NonNull
  public final TextView tvTransactionCount;

  @NonNull
  public final TextView tvTransactionVolume;

  @Bindable
  protected StockInfo mStockInfo;

  protected StockLayoutBinding(Object _bindingComponent, View _root, int _localFieldCount,
      TextView tvClosePrice, TextView tvHighPrice, TextView tvLowPrice, TextView tvMonthlyAverage,
      TextView tvOpenPrice, TextView tvPriceDifference, TextView tvStockCode, TextView tvStockName,
      TextView tvTradeValue, TextView tvTransactionCount, TextView tvTransactionVolume) {
    super(_bindingComponent, _root, _localFieldCount);
    this.tvClosePrice = tvClosePrice;
    this.tvHighPrice = tvHighPrice;
    this.tvLowPrice = tvLowPrice;
    this.tvMonthlyAverage = tvMonthlyAverage;
    this.tvOpenPrice = tvOpenPrice;
    this.tvPriceDifference = tvPriceDifference;
    this.tvStockCode = tvStockCode;
    this.tvStockName = tvStockName;
    this.tvTradeValue = tvTradeValue;
    this.tvTransactionCount = tvTransactionCount;
    this.tvTransactionVolume = tvTransactionVolume;
  }

  public abstract void setStockInfo(@Nullable StockInfo stockInfo);

  @Nullable
  public StockInfo getStockInfo() {
    return mStockInfo;
  }

  @NonNull
  public static StockLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.stock_layout, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static StockLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<StockLayoutBinding>inflateInternal(inflater, R.layout.stock_layout, root, attachToRoot, component);
  }

  @NonNull
  public static StockLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.stock_layout, null, false, component)
   */
  @NonNull
  @Deprecated
  public static StockLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<StockLayoutBinding>inflateInternal(inflater, R.layout.stock_layout, null, false, component);
  }

  public static StockLayoutBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static StockLayoutBinding bind(@NonNull View view, @Nullable Object component) {
    return (StockLayoutBinding)bind(component, view, R.layout.stock_layout);
  }
}
